t_list	*ft_lstnew(void *content);
void	ft_lstadd_front(t_list **lst, t_list *new);
int		ft_lstsize(t_list *lst);
t_list	*ft_lstlast(t_list *lst);
void	ft_lstdelone(t_list *lst, void (*del)(void *));
void	ft_lstadd_back(t_list **lst, t_list *new);
void	ft_lstclear(t_list **lst, void (*del)(void *));
void	ft_lstiter(t_list *lst, void (*f)(void*));
t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *));


typedef struct s_list
{
	void			*content;
	struct s_list	*next;
}					t_list;


OBJ				= $(SRC:.c=.o)
BONUS			=	ft_lstsize.c ft_lstnew.c ft_lstadd_front.c ft_lstlast.c \
					ft_lstdelone.c ft_lstadd_back.c ft_lstclear.c ft_lstiter.c \
					ft_lstmap.c \
BONUS_OBJ		= $(BONUS:.c=.o)                   